ChatGPT said:
أكيد! خليني أشرحلك الـ cache في Next.js بطريقة بسيطة وواضحة، وخصوصًا في نظام App Router (اللي بدأ مع Next.js 13).

💡 ما معنى "Cache" في Next.js؟
الـ cache هو طريقة Next.js لتخزين (وتسريع) البيانات أو الصفحات بدل ما يعيد بناءها أو يطلبها من السيرفر في كل مرة.

🧠 أنواع الـ Cache في Next.js:
1. Page Cache – تخزين الصفحة نفسها
يعني الصفحة كلها (HTML) بيتخزن بعد أول مرة تتبني فيها.

🟢 مثال:
لو الصفحة /blog/post-1 بتتبني باستخدام generateStaticParams()، Next.js بيبنيها ويحطها في الكاش.
لو زارها 100 شخص، هيتعرض لهم نفس النسخة من الكاش.

2. Fetch Cache – تخزين نتيجة fetch()
لو بتجيب بيانات جوه server component عن طريق fetch()، النتيجة نفسها ممكن تتخزن.

🟢 مثال:

ts
Copy
Edit
const res = await fetch("https://api.example.com/products");
Next.js هيخزن نتيجة الـ fetch دي حسب الإعدادات.

🛠️ إزاي نتحكم في الكاش؟
✅ 1. Static Rendering (SSG)
يتم تلقائيًا تخزين الصفحة (Page Cache).

تستخدم لما تكتب:

ts
Copy
Edit
export const dynamic = 'force-static'
أو تسيبها بالإعدادات الافتراضية في generateStaticParams.

🔁 2. Dynamic Rendering + No Cache
لو عايز الصفحة تتبني من جديد في كل طلب:

ts
Copy
Edit
export const dynamic = 'force-dynamic'
🕒 3. Incremental Static Regeneration (ISR)
يعني: ابني الصفحة مرّة، وبعد فترة حدّثها.

ts
Copy
Edit
export const revalidate = 60; // يعيد بناء الصفحة كل 60 ثانية
🧩 مثال عملي:
tsx
Copy
Edit
export const revalidate = 30; // إعادة توليد الصفحة كل 30 ثانية

export default async function ProductPage() {
  const res = await fetch('https://api.com/products', {
    cache: 'force-cache' // (افتراضيًا)
  });
  const data = await res.json();

  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
🔧 cache في fetch
تقدر تتحكم في كاش الـ fetch كده:

Setting	Description
force-cache	(افتراضي): خزّن نتيجة الـ fetch
no-store	لا تخزن أي شيء (كل مرة يجيب من API من جديد)
revalidate: 60	خزّن النتيجة لمدة 60 ثانية

مثال:

ts
Copy
Edit
await fetch('...', { cache: 'no-store' }) // لا تستخدم كاش
💬 revalidatePath vs revalidateTag
revalidatePath('/blog'): تعيد بناء صفحة معينة

revalidateTag('products'): تعيد بناء كل شيء متعلق بتاج "products"

✅ خلاصة:
نوع الكاش	يستخدم في	مميزاته
Page Cache	صفحات كاملة	سريع جدًا، لكن محتوى ثابت
Fetch Cache	بيانات من API	مرن – تقدر تحدد متى تتحدث
ISR	مزيج بين Static و Dynamic	سريع ومحدث بشكل دوري
