revalidatePath باختصار:
هي دالة من Next.js 13+ (وخاصة مع App Router) بتستخدم لما تكون شغال بـ Server Actions أو Mutations، وهدفها هو:

🌀 إعادة توليد صفحة معينة (أو جزء منها) بشكل محدث (revalidate) لما يتغير الداتا اللي بتأثر على الصفحة دي.

🛠️ يعني إيه "تحديث الصفحة"؟
لو عندك صفحة بتعرض بيانات من قاعدة البيانات (DB)،
زي /snippets/5 وغيّرت الداتا بتاعتها (مثلاً عدلت الكود)،
الصفحة دي ممكن تكون مخزنة (مبنية مسبقًا) أو محتواها جاي من cache.

علشان كده لازم تقوله:

"يا Next.js، البيانات بتاعت الصفحة /snippets/5 اتغيرت، ارجع ابنيها تاني من جديد بآخر بيانات."

وده اللي بتعمله بالضبط revalidatePath('/snippets/5').

🧩 فين بنستخدمها؟
في Server Actions أو Server Functions زي:

ts
Copy
Edit
export async function editSnippet(id: number, code: string) {
  await db.snippet.update({
    where: { id },
    data: { code },
  });

  revalidatePath(`/snippets/${id}`);
  redirect(`/snippets/${id}`);
}
الخطوات اللي بتحصل هنا:
بتحدث الداتا في قاعدة البيانات (update)

بتقول لـ Next.js: أعيد بناء الصفحة /snippets/ID

بتعمل redirect ليوجه المستخدم للصفحة دي بعد التحديث

🧠 إمتى أستخدمها؟
لو الصفحة كانت مبنية باستخدام Static Rendering (SSG) أو ISR

وعايز بعد تحديث الداتا، تعرض النسخة الجديدة مش القديمة

💬 مثال توضيحي:
صفحة فيها:

ts
Copy
Edit
export async function generateStaticParams() { ... }

export async function generateMetadata(...) { ... }

export default async function SnippetPage({ params }) {
  const snippet = await db.snippet.findUnique({ where: { id: params.id } });
  return <pre>{snippet.code}</pre>;
}
لو حد عدل الكود، والصفحة دي كانت مبنية زمان (Static)، فهتفضل تعرض النسخة القديمة!
عشان كده لازم تستخدم revalidatePath بعد التعديل.

📌 ملاحظات:
بتشتغل فقط في Server Actions أو Server Functions

لازم تستوردها من:

ts
Copy
Edit
import { revalidatePath } from 'next/cache';
